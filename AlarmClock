from tkinter import * 
#tkinter - module to create a GUI containing various controls
#import * - means getting all methods from given module

import time
import datetime as dt
import winsound as ws
from threading import Thread
#Thread will start a new process

def Threading():
    t1= Thread(target=myalarm)
    #target = myalarm is call to function which will set and ring the alarm
    t1.start()

def myalarm():
    #infinite loop
    while True :
        #Setting alarm time
        set_time = f"{hour.get()}:{minute.get()}:{second.get()} {ap.get()}"
        #wait for1 second
        time.sleep(1)
        #get the current time from system
        current_time=dt.datetime.now().strftime('%I:%M:%S %p')

        #check current and set time
        if current_time == set_time:
            ws.PlaySound("C:\\Users\\user\\Downloads\\Alarma.wav", ws.SND_ASYNC)
            snooze_btn.config(state=NORMAL)  
            break

def update_time():
    current_time = dt.datetime.now().strftime('%I:%M:%S %p')
    clock_label.config(text=f"Current Time: {current_time}") 
    alarm.after(1000, update_time)

    #afrer will change the time after every 1 second(1000 milliseconds)
    #create an object of Tkinter

def snooze():
    global hour, minute, second, period  # declare first!
    hr = int(hour.get())
    min = int(minute.get())
    sec = int(second.get())

    # Add 2 minutes
    min += 2

    # Handle minute overflow
    if min >= 60:
        min -= 60
        hr += 1

    # Handle hour overflow
    if hr > 12:
        hr -= 12
        if period.get() == "AM":
            period.set("PM")
        else:
            period.set("AM")

    # Update StringVars
    new_set_time = f"{hour.set(f"{hr:02d}")}:{ minute.set(f"{min:02d}")}:{second.set(f"{sec:02d}")}"
    '''
    minute.set(f"{min:02d}")
    second.set(f"{sec:02d}")
    '''
    snooze_btn.config(state=DISABLED)

    # Restart alarm thread
    Threading()

alarm= Tk()

#Assinging size to window
alarm.geometry("600x450")
alarm.configure(bg="#f9f9f9")
 
#label to give heading
Label(alarm,text ="‚è∞ Alarm Clock", font=("Calibri 24 bold") ,fg= "blue", bg="#f9f9f9").pack(pady=15)

#pack() - function which decides the location of label in window
#pady - padding from y axis of window

#currect Time Display
clock_label = Label(alarm, text="", font=("Calibri 18 bold"), fg="red",bg="#f9f9f9" )
clock_label.pack(pady=20)

Label(alarm, text="Set Alarm Time" , font =("Calibri 15 bold"), fg= "green", bg='yellow').pack( pady=10)

frame=Frame(alarm)
frame.pack()


hour= StringVar(alarm)
#covert the hour value to a string
hours = ('00', '01','02', '03', '04', '05', '06', '07','08', '09' ,'10',
         '11', '12')
#tuple of values from 0-23 indicating 24hr clock

hour.set(hours[0])
#set the initial value to 00

hrs=OptionMenu(frame,hour , *hours)
#creates a drop down list
hrs.pack(side=LEFT)


minute= StringVar(alarm)
minutes = ('00', '01','02', '03', '04', '05', '06', '07','08', '09' ,'10',
         '11', '12','13' ,'14', '15','16','17','18','19','20',
          '21', '22','23' ,'24', '25','26','27','28','29','30',
         '31', '32','33' ,'34', '35','36','37','38','39','40',
         '41', '42','43' ,'44', '45','46','47','48','49','50',
         '51', '52','53' ,'54', '55','56','57','58','59','60')
minute.set(minutes[0])
mins=OptionMenu(frame,minute, *minutes)
mins.pack(side=LEFT)

second= StringVar(alarm)
seconds = ('00', '01','02', '03', '04', '05', '06', '07','08', '09' ,'10',
         '11', '12','13' ,'14', '15','16','17','18','19','20',
          '21', '22','23' ,'24', '25','26','27','28','29','30',
         '31', '32','33' ,'34', '35','36','37','38','39','40',
         '41', '42','43' ,'44', '45','46','47','48','49','50',
         '51', '52','53' ,'54', '55','56','57','58','59','60')
second.set(seconds[0])
secs=OptionMenu(frame,second,*seconds)
secs.pack(side=LEFT)

#set AM /PM
ap=StringVar(alarm)
ap.set("AM")
aps=OptionMenu(frame, ap,"AM","PM")
aps.pack(side=LEFT)

btn_frame = Frame(alarm, bg="#f9f9f9")
btn_frame.pack(pady=20)

set_btn = Button(btn_frame, text="Set Alarm", font=('Calibri', 15, 'bold'), width=12, command=Threading)
set_btn.pack(side=LEFT, padx=10)


#command = threading is call to function

#Snoozer functionality
snooze_btn = Button(btn_frame, text="Snooze +2 min", font=('Calibri', 15, 'bold'), width=12, command=snooze, state=DISABLED)
snooze_btn.pack(side=LEFT, padx=10)

#execute the tkinter mainloop
alarm.after(1000,update_time)
alarm.mainloop()
#mainloop() - function which will keep the window running and responsive
